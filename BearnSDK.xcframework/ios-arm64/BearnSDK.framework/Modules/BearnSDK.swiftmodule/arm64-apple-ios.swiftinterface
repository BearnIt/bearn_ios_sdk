// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
// swift-module-flags: -target arm64-apple-ios13.4 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name BearnSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AHIMultiScan
import AVFoundation
import AVKit
import AdSupport
import Auth0
import AuthenticationServices
@_exported import BearnSDK
import CoreGraphics
import CoreLocation
import DGCharts
import DeviceKit
import FirebaseDynamicLinks
import Foundation
import HealthKit
import IQKeyboardManagerSwift
import ImageIO
import JWTDecode
import Kingfisher
import LinkKit
import MBProgressHUD
import MFZFaceScan
import Mantis
import MessageUI
import MobileCoreServices
import SceneKit.ModelIO
import MyFiziqSDKCommon
import MyFiziqSDKCoreLite
import NotificationBannerSwift
import OAuthSwift
import QuartzCore
import SafariServices
import SceneKit
import Swift
import SystemConfiguration
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
extension Foundation.URLRequest {
  public mutating func setUserAuthorizationHeader(token: Swift.String)
}
extension Swift.Dictionary {
  public var jsonStringRepresentation: Swift.String? {
    get
  }
}
extension Foundation.URLComponents {
  public func brnEscape(_ string: Swift.String) -> Swift.String
}
extension Foundation.CharacterSet {
  public static let brnURLQueryAllowed: Foundation.CharacterSet
}
extension UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func sendActions(for controlEvents: UIKit.UIControl.Event)
}
@_hasMissingDesignatedInitializers open class BRNBaseThemeObject : Swift.Codable {
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class BRNTheme : BearnSDK.BRNBaseThemeObject {
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  public func loadCustomInfoFrom(bundle: Foundation.Bundle?, localizationStringsFile: Swift.String? = nil, colorsFile: Swift.String? = nil)
  @objc deinit
}
extension UIKit.UIColor {
  convenience public init(r: CoreFoundation.CGFloat, g: CoreFoundation.CGFloat, b: CoreFoundation.CGFloat, a: CoreFoundation.CGFloat = 1)
}
extension UIKit.UINavigationController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var childForStatusBarStyle: UIKit.UIViewController? {
    @objc get
  }
}
extension Foundation.NSNotification.Name {
  public static let BRNLogoutNotification: Foundation.NSNotification.Name
}
extension UIKit.UICollectionView {
  @_Concurrency.MainActor(unsafe) final public func register<T>(cellType: T.Type) where T : UIKit.UICollectionViewCell, T : BearnSDK.NibLoadable, T : BearnSDK.Reusable
  @_Concurrency.MainActor(unsafe) final public func register<T>(cellType: T.Type) where T : UIKit.UICollectionViewCell, T : BearnSDK.Reusable
  @_Concurrency.MainActor(unsafe) final public func dequeueReusableCell<T>(for indexPath: Foundation.IndexPath, cellType: T.Type = T.self) -> T where T : UIKit.UICollectionViewCell, T : BearnSDK.Reusable
  @_Concurrency.MainActor(unsafe) final public func register<T>(supplementaryViewType: T.Type, ofKind elementKind: Swift.String) where T : UIKit.UICollectionReusableView, T : BearnSDK.NibLoadable, T : BearnSDK.Reusable
  @_Concurrency.MainActor(unsafe) final public func register<T>(supplementaryViewType: T.Type, ofKind elementKind: Swift.String) where T : UIKit.UICollectionReusableView, T : BearnSDK.Reusable
  @_Concurrency.MainActor(unsafe) final public func dequeueReusableSupplementaryView<T>(ofKind elementKind: Swift.String, for indexPath: Foundation.IndexPath, viewType: T.Type = T.self) -> T where T : UIKit.UICollectionReusableView, T : BearnSDK.Reusable
}
extension Swift.String {
  public var convertHtmlToNSAttributedString: Foundation.NSAttributedString? {
    get
  }
  public func convertHtmlToAttributedStringWithCSS(font: UIKit.UIFont?, textColor: UIKit.UIColor? = UIColor.black, lineHeight: Swift.Int = 0, textAlign: UIKit.NSTextAlignment = .left) -> Foundation.NSAttributedString?
}
public protocol UILabelTapableLinksDelegate : ObjectiveC.NSObjectProtocol {
  func tapableLabel(_ label: BearnSDK.UILabelTapableLinks, didTapUrl url: Swift.String, atRange range: Foundation.NSRange)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class UILabelTapableLinks : UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any BearnSDK.UILabelTapableLinksDelegate)?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var attributedText: Foundation.NSAttributedString? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var lineBreakMode: UIKit.NSLineBreakMode {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var numberOfLines: Swift.Int {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc deinit
}
public enum BRNSwiftyJSONError : Swift.Int, Swift.Error {
  case unsupportedType
  case indexOutOfBounds
  case elementTooDeep
  case wrongType
  case notExist
  case invalidJSON
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension BearnSDK.BRNSwiftyJSONError : Foundation.CustomNSError {
  public static var errorDomain: Swift.String {
    get
  }
  public var errorCode: Swift.Int {
    get
  }
  public var errorUserInfo: [Swift.String : Any] {
    get
  }
}
public enum BRNValueType : Swift.Int {
  case number
  case string
  case bool
  case array
  case dictionary
  case null
  case unknown
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct BRNJSON {
  public init(data: Foundation.Data, options opt: Foundation.JSONSerialization.ReadingOptions = []) throws
  public init(_ object: Any)
  public init(parseJSON jsonString: Swift.String)
  public mutating func merge(with other: BearnSDK.BRNJSON) throws
  public func merged(with other: BearnSDK.BRNJSON) throws -> BearnSDK.BRNJSON
  public var type: BearnSDK.BRNValueType {
    get
  }
  public var error: BearnSDK.BRNSwiftyJSONError? {
    get
  }
  public var object: Any {
    get
    set
  }
  @available(*, unavailable, renamed: "null")
  public static var nullJSON: BearnSDK.BRNJSON {
    get
  }
  public static var null: BearnSDK.BRNJSON {
    get
  }
}
public enum Index<T> : Swift.Comparable {
  case array(Swift.Int)
  case dictionary(Swift.DictionaryIndex<Swift.String, T>)
  case null
  public static func == (lhs: BearnSDK.Index<T>, rhs: BearnSDK.Index<T>) -> Swift.Bool
  public static func < (lhs: BearnSDK.Index<T>, rhs: BearnSDK.Index<T>) -> Swift.Bool
}
public typealias JSONIndex = BearnSDK.Index<BearnSDK.BRNJSON>
public typealias JSONRawIndex = BearnSDK.Index<Any>
extension BearnSDK.BRNJSON : Swift.Collection {
  public typealias Index = BearnSDK.JSONRawIndex
  public var startIndex: BearnSDK.BRNJSON.Index {
    get
  }
  public var endIndex: BearnSDK.BRNJSON.Index {
    get
  }
  public func index(after i: BearnSDK.BRNJSON.Index) -> BearnSDK.BRNJSON.Index
  public subscript(position: BearnSDK.BRNJSON.Index) -> (Swift.String, BearnSDK.BRNJSON) {
    get
  }
  public typealias Element = (Swift.String, BearnSDK.BRNJSON)
  public typealias Indices = Swift.DefaultIndices<BearnSDK.BRNJSON>
  public typealias Iterator = Swift.IndexingIterator<BearnSDK.BRNJSON>
  public typealias SubSequence = Swift.Slice<BearnSDK.BRNJSON>
}
public enum JSONKey {
  case index(Swift.Int)
  case key(Swift.String)
}
public protocol JSONSubscriptType {
  var jsonKey: BearnSDK.JSONKey { get }
}
extension Swift.Int : BearnSDK.JSONSubscriptType {
  public var jsonKey: BearnSDK.JSONKey {
    get
  }
}
extension Swift.String : BearnSDK.JSONSubscriptType {
  public var jsonKey: BearnSDK.JSONKey {
    get
  }
}
extension BearnSDK.BRNJSON {
  public subscript(path: [any BearnSDK.JSONSubscriptType]) -> BearnSDK.BRNJSON {
    get
    set
  }
  public subscript(path: any BearnSDK.JSONSubscriptType...) -> BearnSDK.BRNJSON {
    get
    set
  }
}
extension BearnSDK.BRNJSON : Swift.ExpressibleByStringLiteral {
  public init(stringLiteral value: Swift.StringLiteralType)
  public init(extendedGraphemeClusterLiteral value: Swift.StringLiteralType)
  public init(unicodeScalarLiteral value: Swift.StringLiteralType)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.StringLiteralType
  public typealias StringLiteralType = Swift.StringLiteralType
  public typealias UnicodeScalarLiteralType = Swift.StringLiteralType
}
extension BearnSDK.BRNJSON : Swift.ExpressibleByIntegerLiteral {
  public init(integerLiteral value: Swift.IntegerLiteralType)
  public typealias IntegerLiteralType = Swift.IntegerLiteralType
}
extension BearnSDK.BRNJSON : Swift.ExpressibleByBooleanLiteral {
  public init(booleanLiteral value: Swift.BooleanLiteralType)
  public typealias BooleanLiteralType = Swift.BooleanLiteralType
}
extension BearnSDK.BRNJSON : Swift.ExpressibleByFloatLiteral {
  public init(floatLiteral value: Swift.FloatLiteralType)
  public typealias FloatLiteralType = Swift.FloatLiteralType
}
extension BearnSDK.BRNJSON : Swift.ExpressibleByDictionaryLiteral {
  public init(dictionaryLiteral elements: (Swift.String, Any)...)
  public typealias Key = Swift.String
  public typealias Value = Any
}
extension BearnSDK.BRNJSON : Swift.ExpressibleByArrayLiteral {
  public init(arrayLiteral elements: Any...)
  public typealias ArrayLiteralElement = Any
}
extension BearnSDK.BRNJSON : Swift.RawRepresentable {
  public init?(rawValue: Any)
  public var rawValue: Any {
    get
  }
  public func rawData(options opt: Foundation.JSONSerialization.WritingOptions = JSONSerialization.WritingOptions(rawValue: 0)) throws -> Foundation.Data
  public func rawString(_ encoding: Swift.String.Encoding = .utf8, options opt: Foundation.JSONSerialization.WritingOptions = .prettyPrinted) -> Swift.String?
  public func rawString(_ options: [BearnSDK.writingOptionsKeys : Any]) -> Swift.String?
  public typealias RawValue = Any
}
extension BearnSDK.BRNJSON : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
extension BearnSDK.BRNJSON {
  public var array: [BearnSDK.BRNJSON]? {
    get
  }
  public var arrayValue: [BearnSDK.BRNJSON] {
    get
  }
  public var arrayObject: [Any]? {
    get
    set
  }
}
extension BearnSDK.BRNJSON {
  public var dictionary: [Swift.String : BearnSDK.BRNJSON]? {
    get
  }
  public var dictionaryValue: [Swift.String : BearnSDK.BRNJSON] {
    get
  }
  public var dictionaryObject: [Swift.String : Any]? {
    get
    set
  }
}
extension BearnSDK.BRNJSON {
  public var bool: Swift.Bool? {
    get
    set
  }
  public var boolValue: Swift.Bool {
    get
    set
  }
}
extension BearnSDK.BRNJSON {
  public var string: Swift.String? {
    get
    set
  }
  public var stringValue: Swift.String {
    get
    set
  }
}
extension BearnSDK.BRNJSON {
  public var number: Foundation.NSNumber? {
    get
    set
  }
  public var numberValue: Foundation.NSNumber {
    get
    set
  }
}
extension BearnSDK.BRNJSON {
  public var null: Foundation.NSNull? {
    get
    set
  }
  public func exists() -> Swift.Bool
}
extension BearnSDK.BRNJSON {
  public var url: Foundation.URL? {
    get
    set
  }
}
extension BearnSDK.BRNJSON {
  public var double: Swift.Double? {
    get
    set
  }
  public var doubleValue: Swift.Double {
    get
    set
  }
  public var float: Swift.Float? {
    get
    set
  }
  public var floatValue: Swift.Float {
    get
    set
  }
  public var int: Swift.Int? {
    get
    set
  }
  public var intValue: Swift.Int {
    get
    set
  }
  public var uInt: Swift.UInt? {
    get
    set
  }
  public var uIntValue: Swift.UInt {
    get
    set
  }
  public var int8: Swift.Int8? {
    get
    set
  }
  public var int8Value: Swift.Int8 {
    get
    set
  }
  public var uInt8: Swift.UInt8? {
    get
    set
  }
  public var uInt8Value: Swift.UInt8 {
    get
    set
  }
  public var int16: Swift.Int16? {
    get
    set
  }
  public var int16Value: Swift.Int16 {
    get
    set
  }
  public var uInt16: Swift.UInt16? {
    get
    set
  }
  public var uInt16Value: Swift.UInt16 {
    get
    set
  }
  public var int32: Swift.Int32? {
    get
    set
  }
  public var int32Value: Swift.Int32 {
    get
    set
  }
  public var uInt32: Swift.UInt32? {
    get
    set
  }
  public var uInt32Value: Swift.UInt32 {
    get
    set
  }
  public var int64: Swift.Int64? {
    get
    set
  }
  public var int64Value: Swift.Int64 {
    get
    set
  }
  public var uInt64: Swift.UInt64? {
    get
    set
  }
  public var uInt64Value: Swift.UInt64 {
    get
    set
  }
}
extension BearnSDK.BRNJSON : Swift.Comparable {
}
public func == (lhs: BearnSDK.BRNJSON, rhs: BearnSDK.BRNJSON) -> Swift.Bool
public func <= (lhs: BearnSDK.BRNJSON, rhs: BearnSDK.BRNJSON) -> Swift.Bool
public func >= (lhs: BearnSDK.BRNJSON, rhs: BearnSDK.BRNJSON) -> Swift.Bool
public func > (lhs: BearnSDK.BRNJSON, rhs: BearnSDK.BRNJSON) -> Swift.Bool
public func < (lhs: BearnSDK.BRNJSON, rhs: BearnSDK.BRNJSON) -> Swift.Bool
public enum writingOptionsKeys {
  case jsonSerialization
  case castNilToNSNull
  case maxObjextDepth
  case encoding
  public static func == (a: BearnSDK.writingOptionsKeys, b: BearnSDK.writingOptionsKeys) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension BearnSDK.BRNJSON : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func generateOuterShadow()
  @_Concurrency.MainActor(unsafe) public func generateInnerShadow()
  @_Concurrency.MainActor(unsafe) public func generateEllipticalShadow()
}
@objc @_inheritsConvenienceInitializers open class BRNDynamicLinksManager : ObjectiveC.NSObject {
  public static let shared: BearnSDK.BRNDynamicLinksManager
  @discardableResult
  public func handle(url: Foundation.URL) -> Swift.Bool
  public func handleDynamicLink(_ dynamicLink: FirebaseDynamicLinks.DynamicLink)
  @objc override dynamic public init()
  @objc deinit
}
extension Foundation.NSNotification.Name {
  public static let BRNMainTabBarNeedToShowScreenNotification: Foundation.NSNotification.Name
}
extension UIKit.UIWindow {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func motionEnded(_ motion: UIKit.UIEvent.EventSubtype, with event: UIKit.UIEvent?)
}
public protocol GIFAnimatable : AnyObject {
  var animator: BearnSDK.Animator? { get set }
  var layer: QuartzCore.CALayer { get }
  var frame: CoreFoundation.CGRect { get set }
  var contentMode: UIKit.UIView.ContentMode { get set }
}
public protocol ImageContainer {
  var image: UIKit.UIImage? { get set }
}
extension BearnSDK.GIFAnimatable where Self : BearnSDK.ImageContainer {
  public var intrinsicContentSize: CoreFoundation.CGSize {
    get
  }
}
extension BearnSDK.GIFAnimatable {
  public var gifLoopDuration: Foundation.TimeInterval {
    get
  }
  public var activeFrame: UIKit.UIImage? {
    get
  }
  public var frameCount: Swift.Int {
    get
  }
  public var isAnimatingGIF: Swift.Bool {
    get
  }
  public func animate(withGIFNamed imageName: Swift.String, loopCount: Swift.Int = 0, preparationBlock: (() -> Swift.Void)? = nil, animationBlock: (() -> Swift.Void)? = nil)
  public func animate(withGIFData imageData: Foundation.Data, loopCount: Swift.Int = 0, preparationBlock: (() -> Swift.Void)? = nil, animationBlock: (() -> Swift.Void)? = nil)
  public func animate(withGIFURL imageURL: Foundation.URL, loopCount: Swift.Int = 0, preparationBlock: (() -> Swift.Void)? = nil, animationBlock: (() -> Swift.Void)? = nil)
  public func prepareForAnimation(withGIFNamed imageName: Swift.String, loopCount: Swift.Int = 0, completionHandler: (() -> Swift.Void)? = nil)
  public func prepareForAnimation(withGIFData imageData: Foundation.Data, loopCount: Swift.Int = 0, completionHandler: (() -> Swift.Void)? = nil)
  public func prepareForAnimation(withGIFURL imageURL: Foundation.URL, loopCount: Swift.Int = 0, completionHandler: (() -> Swift.Void)? = nil)
  public func prepareForReuse()
  public func startAnimatingGIF()
  public func stopAnimatingGIF()
  public func setShouldResizeFrames(_ resize: Swift.Bool)
  public func setFrameBufferCount(_ frames: Swift.Int)
  public func updateImageIfNeeded()
}
@objc @_inheritsConvenienceInitializers open class Bearn : ObjectiveC.NSObject {
  @objc public static let shared: BearnSDK.Bearn
  @objc public class var environment: BearnSDK.BRNEnvironment {
    @objc get
  }
  public var apiBearerToken: Swift.String? {
    get
  }
  @objc public func loadDefaultTheme()
  @objc public func loadCustomInfoFrom(bundle: Foundation.Bundle? = .main, localizationStringsFile: Swift.String? = nil, colorsFile: Swift.String? = nil)
  @objc public func bearnViewController(onClose: ((UIKit.UIViewController?) -> Swift.Void)?) -> UIKit.UIViewController
  @objc public func bearnViewController(isExitHidden: Swift.Bool = false, parterId: Swift.String? = nil, firstName: Swift.String? = nil, lastName: Swift.String? = nil, email: Swift.String? = nil, externalId: Swift.String? = nil, token: Swift.String? = nil, onClose: ((UIKit.UIViewController?) -> Swift.Void)?) -> UIKit.UIViewController
  @objc public func present(on parentViewController: UIKit.UIViewController? = nil)
  @objc public func present(on parentViewController: UIKit.UIViewController? = nil, isExitHidden: Swift.Bool = false, parterId: Swift.String? = nil, firstName: Swift.String? = nil, lastName: Swift.String? = nil, email: Swift.String? = nil, externalId: Swift.String? = nil, token: Swift.String? = nil)
  @objc override dynamic public init()
  @objc public class func setupEnvironment(_ environment: BearnSDK.BRNEnvironment)
  public class func setupEnvironment(_ environment: BearnSDK.BRNEnvironment, checkAppVersion: Swift.Bool)
  @objc public class func setupFitBit(consumerKey: Swift.String, consumerSecret: Swift.String)
  @objc public func deleteFirebaseTokenIfExists(completition: (() -> Swift.Void)? = nil)
  @objc public func isBearnURL(url: Foundation.URL) -> Swift.Bool
  @discardableResult
  @objc public func handle(url: Foundation.URL, options: [UIKit.UIApplication.OpenURLOptionsKey : Any]) -> Swift.Bool
  open func performFetchWithCompletionHandler(_ completionHandler: @escaping (UIKit.UIBackgroundFetchResult) -> Swift.Void)
  @objc deinit
}
public protocol StoryboardBased : AnyObject {
  static var sceneStoryboard: UIKit.UIStoryboard { get }
}
extension BearnSDK.StoryboardBased {
  public static var sceneStoryboard: UIKit.UIStoryboard {
    get
  }
}
extension BearnSDK.StoryboardBased where Self : UIKit.UIViewController {
  public static func instantiate() -> Self
}
extension Foundation.NSNotification.Name {
  public static let BRNLastRegisteredUserEmail: Foundation.NSNotification.Name
}
@objc @_inheritsConvenienceInitializers open class BRNSmartNotificationManager : ObjectiveC.NSObject {
  public static var shared: BearnSDK.BRNSmartNotificationManager
  public func handleSmartNotification(userInfo: [Swift.AnyHashable : Any], needToDisplayBanner: Swift.Bool) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
extension Foundation.NSNotification.Name {
  public static let BRNDashboardDataNeedReloadNotification: Foundation.NSNotification.Name
  public static let BRNDashboardHealthDataNeedUpdateAndReloadNotification: Foundation.NSNotification.Name
  public static let BRNDashboardDataReceivedNotification: Foundation.NSNotification.Name
}
public protocol StoryboardSceneBased : AnyObject {
  static var sceneStoryboard: UIKit.UIStoryboard { get }
  static var sceneIdentifier: Swift.String { get }
}
extension BearnSDK.StoryboardSceneBased {
  public static var sceneIdentifier: Swift.String {
    get
  }
}
extension BearnSDK.StoryboardSceneBased where Self : UIKit.UIViewController {
  public static func instantiate() -> Self
}
public protocol NibOwnerLoadable : AnyObject {
  static var nib: UIKit.UINib { get }
}
extension BearnSDK.NibOwnerLoadable {
  public static var nib: UIKit.UINib {
    get
  }
}
extension BearnSDK.NibOwnerLoadable where Self : UIKit.UIView {
  public func loadNibContent()
}
@objc @_inheritsConvenienceInitializers open class BRNHealthKitManager : ObjectiveC.NSObject {
  public static let shared: BearnSDK.BRNHealthKitManager
  public class func authorizeHealthKit(completion: @escaping (Swift.Bool, (any Swift.Error)?) -> Swift.Void)
  public func fetchLatestHeartRateSample(completion: @escaping (_ samples: [HealthKit.HKQuantitySample]?) -> Swift.Void)
  public func loadBiometricDevices(completed: (() -> Swift.Void)?)
  @objc override dynamic public init()
  @objc deinit
}
extension UIKit.UIStatusBarStyle {
  public static var darkContentWorkaround: UIKit.UIStatusBarStyle {
    get
  }
}
extension UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public class func fromStoryboard<T>(_ storyboardName: Swift.String) -> T where T : UIKit.UIViewController
  @_Concurrency.MainActor(unsafe) public func openLink(_ link: Swift.String, inBrowser: Swift.Bool = false, title: Swift.String? = nil)
}
@frozen public struct AnyDecodable : Swift.Decodable {
  public let value: Any
  public init<T>(_ value: T?)
}
@usableFromInline
internal protocol _AnyDecodable {
  var value: Any { get }
  init<T>(_ value: T?)
}
extension BearnSDK.AnyDecodable : BearnSDK._AnyDecodable {
}
extension BearnSDK._AnyDecodable {
  public init(from decoder: any Swift.Decoder) throws
}
extension BearnSDK.AnyDecodable : Swift.Equatable {
  public static func == (lhs: BearnSDK.AnyDecodable, rhs: BearnSDK.AnyDecodable) -> Swift.Bool
}
extension BearnSDK.AnyDecodable : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension BearnSDK.AnyDecodable : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension BearnSDK.AnyDecodable : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol Reusable : AnyObject {
  static var reuseIdentifier: Swift.String { get }
}
public typealias NibReusable = BearnSDK.NibLoadable & BearnSDK.Reusable
extension BearnSDK.Reusable {
  public static var reuseIdentifier: Swift.String {
    get
  }
}
extension Swift.Double {
  public func toDoubleRounded(upTo digits: Swift.Int) -> Swift.Double
  public func toDoubleFloor(downTo digits: Swift.Int) -> Swift.Double
  public var feetsToCM: Swift.Double {
    get
  }
  public var inchesToCM: Swift.Double {
    get
  }
  public var cmToFeets: Swift.Double {
    get
  }
  public var cmToInches: Swift.Double {
    get
  }
  public var poundsToKG: Swift.Double {
    get
  }
  public var kgToPounds: Swift.Double {
    get
  }
  public var roundedTo1DigitString: Swift.String {
    get
  }
  public var roundedTo2DigitString: Swift.String {
    get
  }
  public var roundedDownTo1DigitString: Swift.String {
    get
  }
  public var roundedDownTo2DigitString: Swift.String {
    get
  }
  public var to1DigitsString: Swift.String {
    get
  }
  public var to2DigitsString: Swift.String {
    get
  }
}
@frozen public struct AnyEncodable : Swift.Encodable {
  public let value: Any
  public init<T>(_ value: T?)
}
@usableFromInline
internal protocol _AnyEncodable {
  var value: Any { get }
  init<T>(_ value: T?)
}
extension BearnSDK.AnyEncodable : BearnSDK._AnyEncodable {
}
extension BearnSDK._AnyEncodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
extension BearnSDK.AnyEncodable : Swift.Equatable {
  public static func == (lhs: BearnSDK.AnyEncodable, rhs: BearnSDK.AnyEncodable) -> Swift.Bool
}
extension BearnSDK.AnyEncodable : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension BearnSDK.AnyEncodable : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension BearnSDK.AnyEncodable : Swift.ExpressibleByNilLiteral {
}
extension BearnSDK.AnyEncodable : Swift.ExpressibleByBooleanLiteral {
  public typealias BooleanLiteralType = Swift.Bool
}
extension BearnSDK.AnyEncodable : Swift.ExpressibleByIntegerLiteral {
  public typealias IntegerLiteralType = Swift.Int
}
extension BearnSDK.AnyEncodable : Swift.ExpressibleByFloatLiteral {
  public typealias FloatLiteralType = Swift.Double
}
extension BearnSDK.AnyEncodable : Swift.ExpressibleByStringLiteral {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension BearnSDK.AnyEncodable : Swift.ExpressibleByStringInterpolation {
  public typealias StringInterpolation = Swift.DefaultStringInterpolation
}
extension BearnSDK.AnyEncodable : Swift.ExpressibleByArrayLiteral {
  public typealias ArrayLiteralElement = Any
}
extension BearnSDK.AnyEncodable : Swift.ExpressibleByDictionaryLiteral {
  public typealias Key = Swift.AnyHashable
  public typealias Value = Any
}
extension BearnSDK._AnyEncodable {
  public init(nilLiteral _: ())
  public init(booleanLiteral value: Swift.Bool)
  public init(integerLiteral value: Swift.Int)
  public init(floatLiteral value: Swift.Double)
  public init(extendedGraphemeClusterLiteral value: Swift.String)
  public init(stringLiteral value: Swift.String)
  public init(arrayLiteral elements: Any...)
  public init(dictionaryLiteral elements: (Swift.AnyHashable, Any)...)
}
extension BearnSDK.AnyEncodable : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc public enum BRNEnvironment : Swift.Int {
  case production
  case development
  case partnerDemo
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public class Animator {
  public init(withDelegate delegate: any BearnSDK.GIFAnimatable)
  @objc deinit
}
extension UIKit.UIImageView : BearnSDK.ImageContainer {
}
public protocol NibLoadable : AnyObject {
  static var nib: UIKit.UINib { get }
}
extension BearnSDK.NibLoadable {
  public static var nib: UIKit.UINib {
    get
  }
}
extension BearnSDK.NibLoadable where Self : UIKit.UIView {
  public static func loadFromNib() -> Self
}
extension UIKit.UITableView {
  @_Concurrency.MainActor(unsafe) final public func register<T>(cellType: T.Type) where T : UIKit.UITableViewCell, T : BearnSDK.NibLoadable, T : BearnSDK.Reusable
  @_Concurrency.MainActor(unsafe) final public func register<T>(cellType: T.Type) where T : UIKit.UITableViewCell, T : BearnSDK.Reusable
  @_Concurrency.MainActor(unsafe) final public func dequeueReusableCell<T>(for indexPath: Foundation.IndexPath, cellType: T.Type = T.self) -> T where T : UIKit.UITableViewCell, T : BearnSDK.Reusable
  @_Concurrency.MainActor(unsafe) final public func register<T>(headerFooterViewType: T.Type) where T : UIKit.UITableViewHeaderFooterView, T : BearnSDK.NibLoadable, T : BearnSDK.Reusable
  @_Concurrency.MainActor(unsafe) final public func register<T>(headerFooterViewType: T.Type) where T : UIKit.UITableViewHeaderFooterView, T : BearnSDK.Reusable
  @_Concurrency.MainActor(unsafe) final public func dequeueReusableHeaderFooterView<T>(_ viewType: T.Type = T.self) -> T? where T : UIKit.UITableViewHeaderFooterView, T : BearnSDK.Reusable
}
@frozen public struct AnyCodable : Swift.Codable {
  public let value: Any
  public init<T>(_ value: T?)
}
extension BearnSDK.AnyCodable : BearnSDK._AnyEncodable, BearnSDK._AnyDecodable {
}
extension BearnSDK.AnyCodable : Swift.Equatable {
  public static func == (lhs: BearnSDK.AnyCodable, rhs: BearnSDK.AnyCodable) -> Swift.Bool
}
extension BearnSDK.AnyCodable : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension BearnSDK.AnyCodable : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension BearnSDK.AnyCodable : Swift.ExpressibleByNilLiteral {
}
extension BearnSDK.AnyCodable : Swift.ExpressibleByBooleanLiteral {
  public typealias BooleanLiteralType = Swift.Bool
}
extension BearnSDK.AnyCodable : Swift.ExpressibleByIntegerLiteral {
  public typealias IntegerLiteralType = Swift.Int
}
extension BearnSDK.AnyCodable : Swift.ExpressibleByFloatLiteral {
  public typealias FloatLiteralType = Swift.Double
}
extension BearnSDK.AnyCodable : Swift.ExpressibleByStringLiteral {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension BearnSDK.AnyCodable : Swift.ExpressibleByArrayLiteral {
  public typealias ArrayLiteralElement = Any
}
extension BearnSDK.AnyCodable : Swift.ExpressibleByDictionaryLiteral {
  public typealias Key = Swift.AnyHashable
  public typealias Value = Any
}
extension BearnSDK.AnyCodable : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension UIKit.UINavigationController {
  @_Concurrency.MainActor(unsafe) public func pushViewController(viewController: UIKit.UIViewController, animated: Swift.Bool, completion: (() -> Swift.Void)?)
}
extension BearnSDK.BRNSwiftyJSONError : Swift.Equatable {}
extension BearnSDK.BRNSwiftyJSONError : Swift.Hashable {}
extension BearnSDK.BRNSwiftyJSONError : Swift.RawRepresentable {}
extension BearnSDK.BRNValueType : Swift.Equatable {}
extension BearnSDK.BRNValueType : Swift.Hashable {}
extension BearnSDK.BRNValueType : Swift.RawRepresentable {}
extension BearnSDK.writingOptionsKeys : Swift.Equatable {}
extension BearnSDK.writingOptionsKeys : Swift.Hashable {}
extension BearnSDK.BRNEnvironment : Swift.Equatable {}
extension BearnSDK.BRNEnvironment : Swift.Hashable {}
extension BearnSDK.BRNEnvironment : Swift.RawRepresentable {}
