#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.5.1 (swiftlang-1300.0.31.4 clang-1300.0.29.6)
#ifndef BEARNSDK_SWIFT_H
#define BEARNSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import QuartzCore;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="BearnSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSCoder;

IB_DESIGNABLE
SWIFT_CLASS("_TtC8BearnSDK16BRNColoredButton")
@interface BRNColoredButton : UIButton
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8BearnSDK22BRNDynamicLinksManager")
@interface BRNDynamicLinksManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8BearnSDK16BRNGarminManager")
@interface BRNGarminManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8BearnSDK19BRNHealthKitManager")
@interface BRNHealthKitManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSNumber;
@class UIColor;
@class UILabel;
@class UIImageView;
@class NSString;
@class UIImage;

SWIFT_CLASS("_TtC8BearnSDK21BRNNotificationBanner")
@interface BRNNotificationBanner : UIView
/// How long the slide down animation should last.
@property (nonatomic) NSTimeInterval animationDuration;
/// The preferred style of the status bar during display of the banner. Defaults to <code>.LightContent</code>.
/// If the banner’s <code>adjustsStatusBarStyle</code> is false, this property does nothing.
@property (nonatomic) UIStatusBarStyle preferredStatusBarStyle;
/// Whether or not this banner should adjust the status bar style during its presentation. Defaults to <code>false</code>.
@property (nonatomic) BOOL adjustsStatusBarStyle;
/// The color of the text as well as the image tint color if <code>shouldTintImage</code> is <code>true</code>.
@property (nonatomic, strong) UIColor * _Nonnull textColor;
/// The height of the banner. Default is 80.
@property (nonatomic) CGFloat minimumHeight;
/// Whether or not the banner should show a shadow when presented.
@property (nonatomic) BOOL hasShadows;
/// The color of the background view. Defaults to <code>nil</code>.
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/// The opacity of the background view. Defaults to 0.95.
@property (nonatomic) CGFloat alpha;
/// A block to call when the uer taps on the banner.
@property (nonatomic, copy) void (^ _Nullable didTapBlock)(void);
/// A block to call after the banner has finished dismissing and is off screen.
@property (nonatomic, copy) void (^ _Nullable didDismissBlock)(void);
/// Whether or not the banner should dismiss itself when the user taps. Defaults to <code>true</code>.
@property (nonatomic) BOOL dismissesOnTap;
/// Whether or not the banner should dismiss itself when the user swipes up. Defaults to <code>true</code>.
@property (nonatomic) BOOL dismissesOnSwipe;
/// Whether or not the banner should tint the associated image to the provided <code>textColor</code>. Defaults to <code>true</code>.
@property (nonatomic) BOOL shouldTintImage;
/// The label that displays the banner’s title.
@property (nonatomic, readonly, strong) UILabel * _Nonnull titleLabel;
/// The label that displays the banner’s subtitle.
@property (nonatomic, readonly, strong) UILabel * _Nonnull detailLabel;
/// The image view that displays the <code>image</code>.
@property (nonatomic, readonly, strong) UIImageView * _Nonnull imageView;
/// A Banner with the provided <code>title</code>, <code>subtitle</code>, and optional <code>image</code>, ready to be presented with <code>show()</code>.
/// \param title The title of the banner. Optional. Defaults to nil.
///
/// \param subtitle The subtitle of the banner. Optional. Defaults to nil.
///
/// \param image The image on the left of the banner. Optional. Defaults to nil.
///
/// \param backgroundColor The color of the banner’s background view. Defaults to <code>UIColor.blackColor()</code>.
///
/// \param didTapBlock An action to be called when the user taps on the banner. Optional. Defaults to <code>nil</code>.
///
- (nonnull instancetype)initWithTitle:(NSString * _Nullable)title subtitle:(NSString * _Nullable)subtitle image:(UIImage * _Nullable)image backgroundColor:(UIColor * _Nonnull)backgroundColor didTapBlock:(void (^ _Nullable)(void))didTapBlock OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)didMoveToSuperview;
- (void)layoutSubviews;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC8BearnSDK20BRNSmartNotification")
@interface BRNSmartNotification : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8BearnSDK27BRNSmartNotificationManager")
@interface BRNSmartNotificationManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


IB_DESIGNABLE
SWIFT_CLASS("_TtC8BearnSDK25BRNSurveySegmentedControl")
@interface BRNSurveySegmentedControl : UIControl
@property (nonatomic) IBInspectable CGFloat padding;
@property (nonatomic) IBInspectable CGFloat customBorderWidth;
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull customBorderColor;
@property (nonatomic) IBInspectable CGFloat animationDuration;
@property (nonatomic) IBInspectable CGFloat thumbViewAlpha;
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull segmentedBackGroundColor;
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull thumbViewColor;
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull thumbViewBorderColor;
@property (nonatomic) IBInspectable CGFloat thumbViewBorderWidth;
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull textColor;
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull selectedTextColor;
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull buttonColorForNormal;
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull buttonColorForSelected;
@property (nonatomic, strong) IBInspectable UIImage * _Nullable imageForItemWithDynamicColors;
/// This property changes on buttons with images and only if itemsWithText = false
/// if buttons have dynamicImages means if we want to show the image without changing its tintcolor.
/// Setting property to true will call buttonColorForNormal and buttonColorForSelected.
/// default value is <code>false</code>.
/// <h3>Usage:</h3>
/// \code
/// control.buttonsWithDynamicImages = true
///
/// \endcode\param None 
///
@property (nonatomic) IBInspectable BOOL buttonsWithDynamicImages;
@property (nonatomic) IBInspectable BOOL itemsWithDynamicColor;
- (void)layoutSubviews;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC8BearnSDK5Bearn")
@interface Bearn : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_CLASS("_TtC8BearnSDK12DeviceStatus")
@interface DeviceStatus : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC8BearnSDK16EFCountingButton")
@interface EFCountingButton : UIButton
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8BearnSDK15EFCountingLabel")
@interface EFCountingLabel : UILabel
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class UITabBarItem;
@class UIEvent;

/// ESTabBar是高度自定义的UITabBar子类，通过添加UIControl的方式实现自定义tabBarItem的效果。目前支持tabBar的大部分属性的设置，例如delegate,items,selectedImge,itemPositioning,itemWidth,itemSpacing等，以后会更加细致的优化tabBar原有属性的设置效果。
SWIFT_CLASS("_TtC8BearnSDK8ESTabBar")
@interface ESTabBar : UITabBar
@property (nonatomic, copy) NSArray<UITabBarItem *> * _Nullable items;
- (void)setItems:(NSArray<UITabBarItem *> * _Nullable)items animated:(BOOL)animated;
- (void)beginCustomizingItems:(NSArray<UITabBarItem *> * _Nonnull)items;
- (BOOL)endCustomizingAnimated:(BOOL)animated SWIFT_WARN_UNUSED_RESULT;
- (void)layoutSubviews;
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



@class UIViewController;
@class NSBundle;

SWIFT_CLASS("_TtC8BearnSDK18ESTabBarController")
@interface ESTabBarController : UITabBarController
/// Observer tabBarController’s selectedViewController. change its selection when it will-set.
@property (nonatomic, strong) UIViewController * _Nullable selectedViewController;
/// Observer tabBarController’s selectedIndex. change its selection when it will-set.
@property (nonatomic) NSUInteger selectedIndex;
/// Customize set tabBar use KVC.
- (void)viewDidLoad;
- (void)tabBar:(UITabBar * _Nonnull)tabBar didSelectItem:(UITabBarItem * _Nonnull)item;
- (void)tabBar:(UITabBar * _Nonnull)tabBar willBeginCustomizingItems:(NSArray<UITabBarItem *> * _Nonnull)items;
- (void)tabBar:(UITabBar * _Nonnull)tabBar didEndCustomizingItems:(NSArray<UITabBarItem *> * _Nonnull)items changed:(BOOL)changed;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8BearnSDK12ESTabBarItem") SWIFT_AVAILABILITY(ios,introduced=8.0)
@interface ESTabBarItem : UITabBarItem
@property (nonatomic, copy) NSString * _Nullable title;
@property (nonatomic, strong) UIImage * _Nullable image;
@property (nonatomic, strong) UIImage * _Nullable selectedImage;
@property (nonatomic, copy) NSString * _Nullable badgeValue;
/// Override UITabBarItem.badgeColor, make it available for iOS8.0 and later.
/// If this item displays a badge, this color will be used for the badge’s background. If set to nil, the default background color will be used instead.
@property (nonatomic, strong) UIColor * _Nullable badgeColor SWIFT_AVAILABILITY(ios,introduced=8.0);
@property (nonatomic) NSInteger tag;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC8BearnSDK21ESTabBarItemBadgeView")
@interface ESTabBarItemBadgeView : UIView
/// Initializer
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC8BearnSDK23ESTabBarItemContentView")
@interface ESTabBarItemContentView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8BearnSDK27ESTabBarItemMoreContentView")
@interface ESTabBarItemMoreContentView : ESTabBarItemContentView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class NSAttributedString;
@class UIFont;
@protocol UITextFieldDelegate;

SWIFT_CLASS("_TtC8BearnSDK18FormattedTextField")
@interface FormattedTextField : UITextField
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, copy) IBInspectable NSString * _Nullable unformattedText;
@property (nonatomic, strong) NSAttributedString * _Nullable attributedText;
@property (nonatomic, copy) NSString * _Nullable placeholder;
@property (nonatomic, strong) NSAttributedString * _Nullable attributedPlaceholder;
@property (nonatomic, strong) UIFont * _Nullable font;
@property (nonatomic) NSTextAlignment textAlignment;
@property (nonatomic, strong) id <UITextFieldDelegate> _Nullable delegate;
- (void)layoutSubviews;
- (CGRect)editingRectForBounds:(CGRect)bounds SWIFT_WARN_UNUSED_RESULT;
- (CGRect)textRectForBounds:(CGRect)bounds SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP8BearnSDK26FormattedTextFieldDelegate_")
@protocol FormattedTextFieldDelegate <UITextFieldDelegate>
@optional
- (BOOL)textField:(UITextField * _Nonnull)textField shouldChangeUnformattedText:(NSString * _Nonnull)text in:(NSRange)range replacementString:(NSString * _Nonnull)replacementString SWIFT_WARN_UNUSED_RESULT;
@end

@class CALayer;

/// Example class that conforms to <code>GIFAnimatable</code>. Uses default values for the animator frame buffer count and resize behavior. You can either use it directly in your code or use it as a blueprint for your own subclass.
SWIFT_CLASS("_TtC8BearnSDK12GIFImageView")
@interface GIFImageView : UIImageView
/// Layer delegate method called periodically by the layer. <em>Should not</em> be called manually.
/// \param layer The delegated layer.
///
- (void)displayLayer:(CALayer * _Nonnull)layer;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image highlightedImage:(UIImage * _Nullable)highlightedImage OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=3.0);
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end






SWIFT_CLASS("_TtC8BearnSDK12SJSegmentTab")
@interface SJSegmentTab : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// Public class for customizing and setting our segmented scroll view
SWIFT_CLASS("_TtC8BearnSDK25SJSegmentedViewController")
@interface SJSegmentedViewController : UIViewController
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)loadView;
- (void)viewDidLoad;
/// Update view as per the current layout
- (void)viewDidLayoutSubviews;
@end


SWIFT_PROTOCOL("_TtP8BearnSDK33SJSegmentedViewControllerDelegate_")
@protocol SJSegmentedViewControllerDelegate
@optional
- (void)didSelectSegmentAtIndex:(NSInteger)index;
/// Method to identify the current controller and segment of contentview
/// \param controller Current controller
///
/// \param segment selected segment
///
/// \param index index of selected segment.
///
- (void)didMoveToPage:(UIViewController * _Nonnull)controller segment:(SJSegmentTab * _Nullable)segment index:(NSInteger)index;
@end


/// Public protocol of  SJSegmentedViewController for content changes and makes the scroll effect.
SWIFT_PROTOCOL("_TtP8BearnSDK35SJSegmentedViewControllerViewSource_")
@protocol SJSegmentedViewControllerViewSource
@optional
/// By default, SJSegmentedScrollView will observe the default view of viewcontroller for content
/// changes and makes the scroll effect. If you want to change the default view, implement
/// SJSegmentedViewControllerViewSource and pass your custom view.
///
/// returns:
/// observe view
- (UIView * _Nonnull)viewForSegmentControllerToObserveContentOffsetChange SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC8BearnSDK8SJShadow")
@interface SJShadow : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8BearnSDK22SwiftyInnerShadowLayer")
@interface SwiftyInnerShadowLayer : CAShapeLayer
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithLayer:(id _Nonnull)layer OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic) CGSize shadowOffset;
@property (nonatomic) float shadowOpacity;
@property (nonatomic) CGFloat shadowRadius;
@property (nonatomic) CGColorRef _Nullable shadowColor;
- (void)layoutSublayers;
@end


SWIFT_CLASS("_TtC8BearnSDK21SwiftyInnerShadowView")
@interface SwiftyInnerShadowView : UIView
@property (nonatomic) CGRect bounds;
@property (nonatomic) CGRect frame;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end






@interface UIButton (SWIFT_EXTENSION(BearnSDK))
- (void)sendActionsForControlEvents:(UIControlEvents)controlEvents;
@end












@class UITouch;

SWIFT_CLASS("_TtC8BearnSDK19UILabelTapableLinks")
@interface UILabelTapableLinks : UILabel
@property (nonatomic, strong) NSAttributedString * _Nullable attributedText;
@property (nonatomic) NSLineBreakMode lineBreakMode;
@property (nonatomic) NSInteger numberOfLines;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
@end




@interface UINavigationController (SWIFT_EXTENSION(BearnSDK))
@property (nonatomic, readonly, strong) UIViewController * _Nullable childViewControllerForStatusBarStyle;
@end











@interface UIWindow (SWIFT_EXTENSION(BearnSDK))
- (void)motionEnded:(UIEventSubtype)motion withEvent:(UIEvent * _Nullable)event;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.5.1 (swiftlang-1300.0.31.4 clang-1300.0.29.6)
#ifndef BEARNSDK_SWIFT_H
#define BEARNSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import QuartzCore;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="BearnSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSCoder;

IB_DESIGNABLE
SWIFT_CLASS("_TtC8BearnSDK16BRNColoredButton")
@interface BRNColoredButton : UIButton
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8BearnSDK22BRNDynamicLinksManager")
@interface BRNDynamicLinksManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8BearnSDK16BRNGarminManager")
@interface BRNGarminManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8BearnSDK19BRNHealthKitManager")
@interface BRNHealthKitManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSNumber;
@class UIColor;
@class UILabel;
@class UIImageView;
@class NSString;
@class UIImage;

SWIFT_CLASS("_TtC8BearnSDK21BRNNotificationBanner")
@interface BRNNotificationBanner : UIView
/// How long the slide down animation should last.
@property (nonatomic) NSTimeInterval animationDuration;
/// The preferred style of the status bar during display of the banner. Defaults to <code>.LightContent</code>.
/// If the banner’s <code>adjustsStatusBarStyle</code> is false, this property does nothing.
@property (nonatomic) UIStatusBarStyle preferredStatusBarStyle;
/// Whether or not this banner should adjust the status bar style during its presentation. Defaults to <code>false</code>.
@property (nonatomic) BOOL adjustsStatusBarStyle;
/// The color of the text as well as the image tint color if <code>shouldTintImage</code> is <code>true</code>.
@property (nonatomic, strong) UIColor * _Nonnull textColor;
/// The height of the banner. Default is 80.
@property (nonatomic) CGFloat minimumHeight;
/// Whether or not the banner should show a shadow when presented.
@property (nonatomic) BOOL hasShadows;
/// The color of the background view. Defaults to <code>nil</code>.
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/// The opacity of the background view. Defaults to 0.95.
@property (nonatomic) CGFloat alpha;
/// A block to call when the uer taps on the banner.
@property (nonatomic, copy) void (^ _Nullable didTapBlock)(void);
/// A block to call after the banner has finished dismissing and is off screen.
@property (nonatomic, copy) void (^ _Nullable didDismissBlock)(void);
/// Whether or not the banner should dismiss itself when the user taps. Defaults to <code>true</code>.
@property (nonatomic) BOOL dismissesOnTap;
/// Whether or not the banner should dismiss itself when the user swipes up. Defaults to <code>true</code>.
@property (nonatomic) BOOL dismissesOnSwipe;
/// Whether or not the banner should tint the associated image to the provided <code>textColor</code>. Defaults to <code>true</code>.
@property (nonatomic) BOOL shouldTintImage;
/// The label that displays the banner’s title.
@property (nonatomic, readonly, strong) UILabel * _Nonnull titleLabel;
/// The label that displays the banner’s subtitle.
@property (nonatomic, readonly, strong) UILabel * _Nonnull detailLabel;
/// The image view that displays the <code>image</code>.
@property (nonatomic, readonly, strong) UIImageView * _Nonnull imageView;
/// A Banner with the provided <code>title</code>, <code>subtitle</code>, and optional <code>image</code>, ready to be presented with <code>show()</code>.
/// \param title The title of the banner. Optional. Defaults to nil.
///
/// \param subtitle The subtitle of the banner. Optional. Defaults to nil.
///
/// \param image The image on the left of the banner. Optional. Defaults to nil.
///
/// \param backgroundColor The color of the banner’s background view. Defaults to <code>UIColor.blackColor()</code>.
///
/// \param didTapBlock An action to be called when the user taps on the banner. Optional. Defaults to <code>nil</code>.
///
- (nonnull instancetype)initWithTitle:(NSString * _Nullable)title subtitle:(NSString * _Nullable)subtitle image:(UIImage * _Nullable)image backgroundColor:(UIColor * _Nonnull)backgroundColor didTapBlock:(void (^ _Nullable)(void))didTapBlock OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)didMoveToSuperview;
- (void)layoutSubviews;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC8BearnSDK20BRNSmartNotification")
@interface BRNSmartNotification : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8BearnSDK27BRNSmartNotificationManager")
@interface BRNSmartNotificationManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


IB_DESIGNABLE
SWIFT_CLASS("_TtC8BearnSDK25BRNSurveySegmentedControl")
@interface BRNSurveySegmentedControl : UIControl
@property (nonatomic) IBInspectable CGFloat padding;
@property (nonatomic) IBInspectable CGFloat customBorderWidth;
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull customBorderColor;
@property (nonatomic) IBInspectable CGFloat animationDuration;
@property (nonatomic) IBInspectable CGFloat thumbViewAlpha;
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull segmentedBackGroundColor;
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull thumbViewColor;
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull thumbViewBorderColor;
@property (nonatomic) IBInspectable CGFloat thumbViewBorderWidth;
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull textColor;
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull selectedTextColor;
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull buttonColorForNormal;
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull buttonColorForSelected;
@property (nonatomic, strong) IBInspectable UIImage * _Nullable imageForItemWithDynamicColors;
/// This property changes on buttons with images and only if itemsWithText = false
/// if buttons have dynamicImages means if we want to show the image without changing its tintcolor.
/// Setting property to true will call buttonColorForNormal and buttonColorForSelected.
/// default value is <code>false</code>.
/// <h3>Usage:</h3>
/// \code
/// control.buttonsWithDynamicImages = true
///
/// \endcode\param None 
///
@property (nonatomic) IBInspectable BOOL buttonsWithDynamicImages;
@property (nonatomic) IBInspectable BOOL itemsWithDynamicColor;
- (void)layoutSubviews;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC8BearnSDK5Bearn")
@interface Bearn : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_CLASS("_TtC8BearnSDK12DeviceStatus")
@interface DeviceStatus : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC8BearnSDK16EFCountingButton")
@interface EFCountingButton : UIButton
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8BearnSDK15EFCountingLabel")
@interface EFCountingLabel : UILabel
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class UITabBarItem;
@class UIEvent;

/// ESTabBar是高度自定义的UITabBar子类，通过添加UIControl的方式实现自定义tabBarItem的效果。目前支持tabBar的大部分属性的设置，例如delegate,items,selectedImge,itemPositioning,itemWidth,itemSpacing等，以后会更加细致的优化tabBar原有属性的设置效果。
SWIFT_CLASS("_TtC8BearnSDK8ESTabBar")
@interface ESTabBar : UITabBar
@property (nonatomic, copy) NSArray<UITabBarItem *> * _Nullable items;
- (void)setItems:(NSArray<UITabBarItem *> * _Nullable)items animated:(BOOL)animated;
- (void)beginCustomizingItems:(NSArray<UITabBarItem *> * _Nonnull)items;
- (BOOL)endCustomizingAnimated:(BOOL)animated SWIFT_WARN_UNUSED_RESULT;
- (void)layoutSubviews;
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



@class UIViewController;
@class NSBundle;

SWIFT_CLASS("_TtC8BearnSDK18ESTabBarController")
@interface ESTabBarController : UITabBarController
/// Observer tabBarController’s selectedViewController. change its selection when it will-set.
@property (nonatomic, strong) UIViewController * _Nullable selectedViewController;
/// Observer tabBarController’s selectedIndex. change its selection when it will-set.
@property (nonatomic) NSUInteger selectedIndex;
/// Customize set tabBar use KVC.
- (void)viewDidLoad;
- (void)tabBar:(UITabBar * _Nonnull)tabBar didSelectItem:(UITabBarItem * _Nonnull)item;
- (void)tabBar:(UITabBar * _Nonnull)tabBar willBeginCustomizingItems:(NSArray<UITabBarItem *> * _Nonnull)items;
- (void)tabBar:(UITabBar * _Nonnull)tabBar didEndCustomizingItems:(NSArray<UITabBarItem *> * _Nonnull)items changed:(BOOL)changed;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8BearnSDK12ESTabBarItem") SWIFT_AVAILABILITY(ios,introduced=8.0)
@interface ESTabBarItem : UITabBarItem
@property (nonatomic, copy) NSString * _Nullable title;
@property (nonatomic, strong) UIImage * _Nullable image;
@property (nonatomic, strong) UIImage * _Nullable selectedImage;
@property (nonatomic, copy) NSString * _Nullable badgeValue;
/// Override UITabBarItem.badgeColor, make it available for iOS8.0 and later.
/// If this item displays a badge, this color will be used for the badge’s background. If set to nil, the default background color will be used instead.
@property (nonatomic, strong) UIColor * _Nullable badgeColor SWIFT_AVAILABILITY(ios,introduced=8.0);
@property (nonatomic) NSInteger tag;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC8BearnSDK21ESTabBarItemBadgeView")
@interface ESTabBarItemBadgeView : UIView
/// Initializer
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC8BearnSDK23ESTabBarItemContentView")
@interface ESTabBarItemContentView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8BearnSDK27ESTabBarItemMoreContentView")
@interface ESTabBarItemMoreContentView : ESTabBarItemContentView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class NSAttributedString;
@class UIFont;
@protocol UITextFieldDelegate;

SWIFT_CLASS("_TtC8BearnSDK18FormattedTextField")
@interface FormattedTextField : UITextField
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, copy) IBInspectable NSString * _Nullable unformattedText;
@property (nonatomic, strong) NSAttributedString * _Nullable attributedText;
@property (nonatomic, copy) NSString * _Nullable placeholder;
@property (nonatomic, strong) NSAttributedString * _Nullable attributedPlaceholder;
@property (nonatomic, strong) UIFont * _Nullable font;
@property (nonatomic) NSTextAlignment textAlignment;
@property (nonatomic, strong) id <UITextFieldDelegate> _Nullable delegate;
- (void)layoutSubviews;
- (CGRect)editingRectForBounds:(CGRect)bounds SWIFT_WARN_UNUSED_RESULT;
- (CGRect)textRectForBounds:(CGRect)bounds SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP8BearnSDK26FormattedTextFieldDelegate_")
@protocol FormattedTextFieldDelegate <UITextFieldDelegate>
@optional
- (BOOL)textField:(UITextField * _Nonnull)textField shouldChangeUnformattedText:(NSString * _Nonnull)text in:(NSRange)range replacementString:(NSString * _Nonnull)replacementString SWIFT_WARN_UNUSED_RESULT;
@end

@class CALayer;

/// Example class that conforms to <code>GIFAnimatable</code>. Uses default values for the animator frame buffer count and resize behavior. You can either use it directly in your code or use it as a blueprint for your own subclass.
SWIFT_CLASS("_TtC8BearnSDK12GIFImageView")
@interface GIFImageView : UIImageView
/// Layer delegate method called periodically by the layer. <em>Should not</em> be called manually.
/// \param layer The delegated layer.
///
- (void)displayLayer:(CALayer * _Nonnull)layer;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image highlightedImage:(UIImage * _Nullable)highlightedImage OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=3.0);
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end






SWIFT_CLASS("_TtC8BearnSDK12SJSegmentTab")
@interface SJSegmentTab : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// Public class for customizing and setting our segmented scroll view
SWIFT_CLASS("_TtC8BearnSDK25SJSegmentedViewController")
@interface SJSegmentedViewController : UIViewController
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)loadView;
- (void)viewDidLoad;
/// Update view as per the current layout
- (void)viewDidLayoutSubviews;
@end


SWIFT_PROTOCOL("_TtP8BearnSDK33SJSegmentedViewControllerDelegate_")
@protocol SJSegmentedViewControllerDelegate
@optional
- (void)didSelectSegmentAtIndex:(NSInteger)index;
/// Method to identify the current controller and segment of contentview
/// \param controller Current controller
///
/// \param segment selected segment
///
/// \param index index of selected segment.
///
- (void)didMoveToPage:(UIViewController * _Nonnull)controller segment:(SJSegmentTab * _Nullable)segment index:(NSInteger)index;
@end


/// Public protocol of  SJSegmentedViewController for content changes and makes the scroll effect.
SWIFT_PROTOCOL("_TtP8BearnSDK35SJSegmentedViewControllerViewSource_")
@protocol SJSegmentedViewControllerViewSource
@optional
/// By default, SJSegmentedScrollView will observe the default view of viewcontroller for content
/// changes and makes the scroll effect. If you want to change the default view, implement
/// SJSegmentedViewControllerViewSource and pass your custom view.
///
/// returns:
/// observe view
- (UIView * _Nonnull)viewForSegmentControllerToObserveContentOffsetChange SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC8BearnSDK8SJShadow")
@interface SJShadow : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8BearnSDK22SwiftyInnerShadowLayer")
@interface SwiftyInnerShadowLayer : CAShapeLayer
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithLayer:(id _Nonnull)layer OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic) CGSize shadowOffset;
@property (nonatomic) float shadowOpacity;
@property (nonatomic) CGFloat shadowRadius;
@property (nonatomic) CGColorRef _Nullable shadowColor;
- (void)layoutSublayers;
@end


SWIFT_CLASS("_TtC8BearnSDK21SwiftyInnerShadowView")
@interface SwiftyInnerShadowView : UIView
@property (nonatomic) CGRect bounds;
@property (nonatomic) CGRect frame;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end






@interface UIButton (SWIFT_EXTENSION(BearnSDK))
- (void)sendActionsForControlEvents:(UIControlEvents)controlEvents;
@end












@class UITouch;

SWIFT_CLASS("_TtC8BearnSDK19UILabelTapableLinks")
@interface UILabelTapableLinks : UILabel
@property (nonatomic, strong) NSAttributedString * _Nullable attributedText;
@property (nonatomic) NSLineBreakMode lineBreakMode;
@property (nonatomic) NSInteger numberOfLines;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
@end




@interface UINavigationController (SWIFT_EXTENSION(BearnSDK))
@property (nonatomic, readonly, strong) UIViewController * _Nullable childViewControllerForStatusBarStyle;
@end











@interface UIWindow (SWIFT_EXTENSION(BearnSDK))
- (void)motionEnded:(UIEventSubtype)motion withEvent:(UIEvent * _Nullable)event;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
