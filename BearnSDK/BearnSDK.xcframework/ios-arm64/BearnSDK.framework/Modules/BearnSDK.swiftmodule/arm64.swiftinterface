// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target arm64-apple-ios12.1 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name BearnSDK
import AVFoundation
import AVKit
import AdSupport
import Auth0
import AuthenticationServices
@_exported import BearnSDK
import Charts
import CoreLocation
import Foundation
import HealthKit
import IQKeyboardManagerSwift
import JWTDecode
import Kingfisher
import LinkKit
import MBProgressHUD
import MapKit
import MessageUI
import MyFiziqSDK
import MyFiziqSDKCommon
import MyFiziqSDKHealthKit
import MyFiziqSDKInputView
import MyFiziqSDKLoginView
import MyFiziqSDKOnboardingView
import MyFiziqSDKProfileView
import MyFiziqSDKTrackingView
import NotificationBannerSwift
import OAuthSwift
import PureLayout
import QuartzCore
import RangeSeekSlider
import SafariServices
import Swift
import SystemConfiguration
import UIKit
import WebKit
extension UIButton {
  @objc override dynamic open func sendActions(for controlEvents: UIKit.UIControl.Event)
}
extension Double {
  public func toDoubleRounded(upTo digits: Swift.Int) -> Swift.Double
  public var feetsToCM: Swift.Double {
    get
  }
  public var inchesToCM: Swift.Double {
    get
  }
  public var cmToFeets: Swift.Double {
    get
  }
  public var cmToInches: Swift.Double {
    get
  }
  public var poundsToKG: Swift.Double {
    get
  }
  public var kgToPounds: Swift.Double {
    get
  }
  public var to2DigitsString: Swift.String {
    get
  }
}
public protocol EFCountAdapter : AnyObject, BearnSDK.EFCount {
  var counter: BearnSDK.EFCounter { get }
}
extension EFCountAdapter {
  public func setUpdateBlock(_ update: ((CoreGraphics.CGFloat, Self) -> Swift.Void)?)
  public func setCompletionBlock(_ completion: ((Self) -> Swift.Void)?)
  public func countFrom(_ startValue: CoreGraphics.CGFloat, to endValue: CoreGraphics.CGFloat, withDuration duration: Foundation.TimeInterval)
  public func countFromCurrentValueTo(_ endValue: CoreGraphics.CGFloat, withDuration duration: Foundation.TimeInterval)
  public func stopCountAtCurrentValue()
}
@objc @_inheritsConvenienceInitializers open class EFCountingButton : UIKit.UIButton, BearnSDK.EFCountAdapter {
  public var counter: BearnSDK.EFCounter {
    get
  }
  open var formatBlock: ((CoreGraphics.CGFloat) -> Swift.String)? {
    @available(*, unavailable)
    get
    set
  }
  open var attributedFormatBlock: ((CoreGraphics.CGFloat) -> Foundation.NSAttributedString)? {
    @available(*, unavailable)
    get
    set
  }
  open var completionBlock: (() -> Swift.Void)? {
    @available(*, unavailable)
    get
    set
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class EFCountingLabel : UIKit.UILabel, BearnSDK.EFCountAdapter {
  public var counter: BearnSDK.EFCounter {
    get
  }
  open var formatBlock: ((CoreGraphics.CGFloat) -> Swift.String)? {
    @available(*, unavailable)
    get
    set
  }
  open var attributedFormatBlock: ((CoreGraphics.CGFloat) -> Foundation.NSAttributedString)? {
    @available(*, unavailable)
    get
    set
  }
  open var completionBlock: (() -> Swift.Void)? {
    @available(*, unavailable)
    get
    set
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension URLComponents {
  public func brnEscape(_ string: Swift.String) -> Swift.String
}
extension CharacterSet {
  public static let brnURLQueryAllowed: Foundation.CharacterSet
}
public enum EFTimingFunction : BearnSDK.EFTiming {
  case linear
  case easeIn(easingRate: CoreGraphics.CGFloat)
  case easeOut(easingRate: CoreGraphics.CGFloat)
  case easeInOut(easingRate: CoreGraphics.CGFloat)
  case easeInBounce
  case easeOutBounce
  public func update(_ time: CoreGraphics.CGFloat) -> CoreGraphics.CGFloat
}
@objc @_inheritsConvenienceInitializers open class Bearn : ObjectiveC.NSObject {
  public static let shared: BearnSDK.Bearn
  public func present(on parentViewController: UIKit.UIViewController)
  @objc override dynamic public init()
  public class func setupEnvironment(_ environment: BearnSDK.BRNEnvironment)
  open func isBearnURL(url: Foundation.URL) -> Swift.Bool
  @discardableResult
  open func handle(url: Foundation.URL, options: [UIKit.UIApplication.OpenURLOptionsKey : Any]) -> Swift.Bool
  open func performFetchWithCompletionHandler(_ completionHandler: @escaping (UIKit.UIBackgroundFetchResult) -> Swift.Void)
  @objc deinit
}
extension Bearn : MyFiziqSDKLoginView.MyFiziqLoginDelegate {
  @objc dynamic public func myfiziqIsReadyAndUserLogged(in isLoggedIn: Swift.Bool)
  @objc dynamic public func myfiziqSetupFailedWithError(_ error: Swift.Error?)
}
public protocol EFTiming {
  func update(_ time: CoreGraphics.CGFloat) -> CoreGraphics.CGFloat
}
public protocol EFCount {
  func countFrom(_ startValue: CoreGraphics.CGFloat, to endValue: CoreGraphics.CGFloat, withDuration duration: Foundation.TimeInterval)
  func countFromCurrentValueTo(_ endValue: CoreGraphics.CGFloat, withDuration duration: Foundation.TimeInterval)
  func stopCountAtCurrentValue()
}
extension EFCount {
  public func countFromZeroTo(_ endValue: CoreGraphics.CGFloat, withDuration duration: Foundation.TimeInterval)
  public func countFrom(_ startValue: CoreGraphics.CGFloat, to endValue: CoreGraphics.CGFloat)
  public func countFromCurrentValueTo(_ endValue: CoreGraphics.CGFloat)
  public func countFromZeroTo(_ endValue: CoreGraphics.CGFloat)
}
public class EFCounter {
  public var timingFunction: BearnSDK.EFTiming
  public var updateBlock: ((CoreGraphics.CGFloat) -> Swift.Void)?
  public var completionBlock: (() -> Swift.Void)?
  public var fromValue: CoreGraphics.CGFloat {
    get
  }
  public var toValue: CoreGraphics.CGFloat {
    get
  }
  public var totalDuration: Swift.Double {
    get
  }
  public var isCounting: Swift.Bool {
    get
  }
  public var progress: CoreGraphics.CGFloat {
    get
  }
  public var currentValue: CoreGraphics.CGFloat {
    get
  }
  public init()
  @objc public func updateValue(_ timer: Foundation.Timer)
  public func reset()
  public func invalidate()
  @objc deinit
}
extension EFCounter : BearnSDK.EFCount {
  public func countFromCurrentValueTo(_ endValue: CoreGraphics.CGFloat, withDuration duration: Foundation.TimeInterval)
  public func countFrom(_ startValue: CoreGraphics.CGFloat, to endValue: CoreGraphics.CGFloat, withDuration duration: Foundation.TimeInterval)
  public func stopCountAtCurrentValue()
}
extension UINavigationController {
  @objc override dynamic open var childForStatusBarStyle: UIKit.UIViewController? {
    @objc get
  }
}
public enum BRNEnvironment : Swift.Int {
  case production
  case development
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension BearnSDK.BRNEnvironment : Swift.Equatable {}
extension BearnSDK.BRNEnvironment : Swift.Hashable {}
extension BearnSDK.BRNEnvironment : Swift.RawRepresentable {}
